{"version":3,"sources":["../src/completer.js"],"names":["StackdriverDatasource","_","StackdriverCompleter","datasource","timeSrv","target","filterQueryCache","filterKeyCache","filterValueCache","editor","session","pos","prefix","callback","token","getTokenAt","row","column","metricType","type","getFilterKeyAndValueForMetric","then","result","concat","filterKeys","transformToCompletions","uniq","flatten","map","getFilterKeys","r","keywordOperatorToken","findToken","filterKey","tokens","getTokens","filterKeyToken","index","value","valuePicker","property","replace","filterValues","Promise","resolve","params","projectId","defaultProjectId","filter","view","self","performTimeSeriesQuery","range","timeRange","response","timeSeries","words","meta","caption","name","score","Number","MAX_VALUE","guard","idx","c","length","obj","keys","forOwn","val","key","isObject","isArray","push"],"mappings":";;;;;;;;;;;;;;;AAAQA,2B,eAAAA,qB;;AACDC,O;;;;;;;;;;;;;;;;;;;;;sCAEMC,oB;AACX,sCAAYC,UAAZ,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;AAAA;;AACvC,eAAKF,UAAL,GAAkBA,UAAlB;AACA,eAAKC,OAAL,GAAeA,OAAf;AACA,eAAKC,MAAL,GAAcA,MAAd;AACA,eAAKC,gBAAL,GAAwB,EAAxB;AACA,eAAKC,cAAL,GAAsB,EAAtB;AACA,eAAKC,gBAAL,GAAwB,EAAxB;AACD;;;;yCAEcC,M,EAAQC,O,EAASC,G,EAAKC,M,EAAQC,Q,EAAU;AAAA;;AACrD,gBAAIC,QAAQJ,QAAQK,UAAR,CAAmBJ,IAAIK,GAAvB,EAA4BL,IAAIM,MAAhC,CAAZ;;AAEA,gBAAIC,aAAa,KAAKb,MAAL,CAAYa,UAA7B;AACA,oBAAQJ,MAAMK,IAAd;AACE,mBAAK,YAAL;AACE,oBAAI,KAAKZ,cAAL,CAAoBW,UAApB,CAAJ,EAAqC;AACnCL,2BAAS,IAAT,EAAe,KAAKN,cAAL,CAAoBW,UAApB,CAAf;AACA;AACD;;AAED,qBAAKE,6BAAL,CAAmCF,UAAnC,EAA+CG,IAA/C,CAAoD,kBAAU;AAC5DC,2BAASA,OAAOC,MAAP,CAAc,CAAC,SAAD,EAAY,UAAZ,CAAd,CAAT;AACA,sBAAIC,aAAa,MAAKC,sBAAL,CACfxB,EAAEyB,IAAF,CAAOzB,EAAE0B,OAAF,CAAUL,OAAOM,GAAP,CAAW,aAAK;AAC/B,2BAAO,MAAKC,aAAL,CAAmBC,CAAnB,EAAsB,EAAtB,EAA0B,EAA1B,CAAP;AACD,mBAFgB,CAAV,CAAP,CADe,EAIb,YAJa,CAAjB;AAKA,wBAAKvB,cAAL,CAAoBW,UAApB,IAAkCM,UAAlC;AACAX,2BAAS,IAAT,EAAeW,UAAf;AACD,iBATD;AAUA;AACF,mBAAK,eAAL;AACE,oBAAIO,uBAAuB,KAAKC,SAAL,CAAetB,OAAf,EAAwBC,IAAIK,GAA5B,EAAiCL,IAAIM,MAArC,EAA6C,kBAA7C,EAAiE,IAAjE,EAAuE,cAAvE,CAA3B;AACA,oBAAI,CAACc,oBAAL,EAA2B;AACzBlB,2BAAS,IAAT,EAAe,EAAf;AACA;AACD;;AAED,oBAAIoB,SAAJ;AACA,oBAAIC,SAASxB,QAAQyB,SAAR,CAAkBJ,qBAAqBf,GAAvC,CAAb;AACA,oBAAIoB,iBAAiB,KAAKJ,SAAL,CAAetB,OAAf,EAAwBC,IAAIK,GAA5B,EAAiCL,IAAIM,MAArC,EAA6C,YAA7C,EAA2D,IAA3D,EAAiE,cAAjE,CAArB;AACA,oBAAImB,kBAAmBL,qBAAqBM,KAArB,GAA6BD,eAAeC,KAA7C,IAAuD,CAA7E,EAAgF;AAC9EJ,8BAAYG,eAAeE,KAA3B;AACD,iBAFD,MAEO;AACLzB,2BAAS,IAAT,EAAe,EAAf;AACA;AACD;;AAED,oBAAI,KAAKL,gBAAL,CAAsBU,UAAtB,KAAqC,KAAKV,gBAAL,CAAsBU,UAAtB,EAAkCe,SAAlC,CAAzC,EAAuF;AACrFpB,2BAAS,IAAT,EAAe,KAAKL,gBAAL,CAAsBU,UAAtB,EAAkCe,SAAlC,CAAf;AACA;AACD;;AAED,qBAAKb,6BAAL,CAAmCF,UAAnC,EAA+CG,IAA/C,CAAoD,kBAAU;AAC5D;AACA,sBAAIkB,cAActC,EAAEuC,QAAF,CAAWP,UAAUQ,OAAV,CAAkB,QAAlB,EAA4B,QAA5B,CAAX,CAAlB;AACA,sBAAIC,eAAe,MAAKjB,sBAAL,CACjBxB,EAAEyB,IAAF,CAAOJ,OAAOM,GAAP,CAAW,aAAK;AACrB,2BAAOW,YAAYT,CAAZ,CAAP;AACD,mBAFM,CAAP,CADiB,EAIf,cAJe,CAAnB;AAKA,wBAAKtB,gBAAL,CAAsBU,UAAtB,IAAoC,MAAKV,gBAAL,CAAsBU,UAAtB,KAAqC,EAAzE;AACA,wBAAKV,gBAAL,CAAsBU,UAAtB,EAAkCe,SAAlC,IAA+CS,YAA/C;AACA7B,2BAAS,IAAT,EAAe6B,YAAf;AACD,iBAXD;AAYA;AApDJ;;AAuDA7B,qBAAS,IAAT,EAAe,EAAf;AACD;;;wDAE6BK,U,EAAY;AACxC,gBAAIA,eAAe,EAAnB,EAAuB;AACrB,qBAAOyB,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;AACD,gBAAI,KAAKtC,gBAAL,CAAsBY,UAAtB,CAAJ,EAAuC;AACrC,qBAAOyB,QAAQC,OAAR,CAAgB,KAAKtC,gBAAL,CAAsBY,UAAtB,CAAhB,CAAP;AACD;AACD,gBAAI2B,SAAS;AACXC,yBAAW,KAAKzC,MAAL,CAAYyC,SAAZ,IAAyB,KAAK3C,UAAL,CAAgB4C,gBADzC;AAEXC,sBAAQ,oBAAoB9B,UAApB,GAAiC,GAF9B;AAGX+B,oBAAM;AAHK,aAAb;AAKA,gBAAIC,OAAO,IAAX;AACA,mBAAO,KAAK/C,UAAL,CAAgBgD,sBAAhB,CAAuCN,MAAvC,EAA+C,EAAEO,OAAO,KAAKhD,OAAL,CAAaiD,SAAb,EAAT,EAA/C,EAAoFhC,IAApF,CAAyF,oBAAY;AAC1G6B,mBAAK5C,gBAAL,CAAsBY,UAAtB,IAAoCoC,SAASC,UAA7C;AACA,qBAAOD,SAASC,UAAhB;AACD,aAHM,CAAP;AAID;;;iDAEsBC,K,EAAOC,I,EAAM;AAClC,mBAAOD,MAAM5B,GAAN,CAAU,gBAAQ;AACvB,qBAAO;AACL8B,yBAASC,IADJ;AAELrB,uBAAOqB,IAFF;AAGLF,sBAAMA,IAHD;AAILG,uBAAOC,OAAOC;AAJT,eAAP;AAMD,aAPM,CAAP;AAQD;;;oCAESpD,O,EAASM,G,EAAKC,M,EAAQZ,M,EAAQiC,K,EAAOyB,K,EAAO;AACpD,gBAAI7B,MAAJ,EAAY8B,GAAZ;AACA,iBAAK,IAAIlC,IAAId,GAAb,EAAkBc,KAAK,CAAvB,EAA0BA,GAA1B,EAA+B;AAC7BI,uBAASxB,QAAQyB,SAAR,CAAkBL,CAAlB,CAAT;AACA,kBAAIA,MAAMd,GAAV,EAAe;AAAE;AACf,oBAAIiD,IAAI,CAAR;AACA,qBAAKD,MAAM,CAAX,EAAcA,MAAM9B,OAAOgC,MAA3B,EAAmCF,KAAnC,EAA0C;AACxCC,uBAAK/B,OAAO8B,GAAP,EAAY1B,KAAZ,CAAkB4B,MAAvB;AACA,sBAAID,KAAKhD,MAAT,EAAiB;AACf;AACD;AACF;AACF,eARD,MAQO;AACL+C,sBAAM9B,OAAOgC,MAAP,GAAgB,CAAtB;AACD;;AAED,qBAAOF,OAAO,CAAd,EAAiBA,KAAjB,EAAwB;AACtB,oBAAI9B,OAAO8B,GAAP,EAAY7C,IAAZ,KAAqB4C,KAAzB,EAAgC;AAC9B,yBAAO,IAAP;AACD;;AAED,oBAAI7B,OAAO8B,GAAP,EAAY7C,IAAZ,KAAqBd,MAArB,KACE,CAACiC,KAAD,IAAUJ,OAAO8B,GAAP,EAAY1B,KAAZ,KAAsBA,KADlC,CAAJ,EAC8C;AAC5CJ,yBAAO8B,GAAP,EAAYhD,GAAZ,GAAkBc,CAAlB;AACAI,yBAAO8B,GAAP,EAAY3B,KAAZ,GAAoB2B,GAApB;AACA,yBAAO9B,OAAO8B,GAAP,CAAP;AACD;AACF;AACF;;AAED,mBAAO,IAAP;AACD;;;wCAEaG,G,EAAKvD,M,EAAQwD,I,EAAM;AAAA;;AAC/BnE,cAAEoE,MAAF,CAASF,GAAT,EAAc,UAACG,GAAD,EAAMC,GAAN,EAAc;AAC1B,kBAAIA,QAAQ,QAAZ,EAAsB;AACpBA,sBAAM,OAAN;AACD;AACD,kBAAItE,EAAEuE,QAAF,CAAWF,GAAX,CAAJ,EAAqB;AACnB,uBAAKzC,aAAL,CAAmByC,GAAnB,EAAwB1D,SAAS2D,GAAT,GAAe,GAAvC,EAA4CH,IAA5C;AACD,eAFD,MAEO,IAAInE,EAAEwE,OAAF,CAAUH,GAAV,CAAJ,EAAoB;AACzB;AACD,eAFM,MAEA,IAAIC,QAAQ,QAAZ,EAAsB;AAC3B;AACD,eAFM,MAEA;AACLH,qBAAKM,IAAL,CAAU9D,SAAS2D,GAAnB;AACD;AACF,aAbD;;AAeA,mBAAOH,IAAP;AACD","file":"completer.js","sourcesContent":["import {StackdriverDatasource} from \"./datasource\";\nimport _ from 'lodash';\n\nexport class StackdriverCompleter {\n  constructor(datasource, timeSrv, target) {\n    this.datasource = datasource;\n    this.timeSrv = timeSrv;\n    this.target = target;\n    this.filterQueryCache = {};\n    this.filterKeyCache = {};\n    this.filterValueCache = {};\n  }\n\n  getCompletions(editor, session, pos, prefix, callback) {\n    let token = session.getTokenAt(pos.row, pos.column);\n\n    var metricType = this.target.metricType;\n    switch (token.type) {\n      case 'identifier':\n        if (this.filterKeyCache[metricType]) {\n          callback(null, this.filterKeyCache[metricType]);\n          return;\n        }\n\n        this.getFilterKeyAndValueForMetric(metricType).then(result => {\n          result = result.concat(['project', 'group.id']);\n          var filterKeys = this.transformToCompletions(\n            _.uniq(_.flatten(result.map(r => {\n              return this.getFilterKeys(r, '', []);\n            })))\n            , 'filter key');\n          this.filterKeyCache[metricType] = filterKeys;\n          callback(null, filterKeys);\n        });\n        return;\n      case 'string.quoted':\n        var keywordOperatorToken = this.findToken(session, pos.row, pos.column, 'keyword.operator', null, 'paren.lparen');\n        if (!keywordOperatorToken) {\n          callback(null, []);\n          return;\n        }\n\n        var filterKey;\n        var tokens = session.getTokens(keywordOperatorToken.row);\n        var filterKeyToken = this.findToken(session, pos.row, pos.column, 'identifier', null, 'paren.lparen');\n        if (filterKeyToken && (keywordOperatorToken.index - filterKeyToken.index) <= 2) {\n          filterKey = filterKeyToken.value;\n        } else {\n          callback(null, []);\n          return;\n        }\n\n        if (this.filterValueCache[metricType] && this.filterValueCache[metricType][filterKey]) {\n          callback(null, this.filterValueCache[metricType][filterKey]);\n          return;\n        }\n\n        this.getFilterKeyAndValueForMetric(metricType).then(result => {\n          // to filter query, need to use 'label'\n          let valuePicker = _.property(filterKey.replace(/label/g, 'labels'));\n          var filterValues = this.transformToCompletions(\n            _.uniq(result.map(r => {\n              return valuePicker(r);\n            }))\n            , 'filter value');\n          this.filterValueCache[metricType] = this.filterValueCache[metricType] || {};\n          this.filterValueCache[metricType][filterKey] = filterValues;\n          callback(null, filterValues);\n        });\n        return;\n    }\n\n    callback(null, []);\n  }\n\n  getFilterKeyAndValueForMetric(metricType) {\n    if (metricType === '') {\n      return Promise.resolve({});\n    }\n    if (this.filterQueryCache[metricType]) {\n      return Promise.resolve(this.filterQueryCache[metricType]);\n    }\n    let params = {\n      projectId: this.target.projectId || this.datasource.defaultProjectId,\n      filter: 'metric.type = \"' + metricType + '\"',\n      view: 'HEADERS'\n    };\n    var self = this;\n    return this.datasource.performTimeSeriesQuery(params, { range: this.timeSrv.timeRange() }).then(response => {\n      self.filterQueryCache[metricType] = response.timeSeries;\n      return response.timeSeries;\n    });\n  }\n\n  transformToCompletions(words, meta) {\n    return words.map(name => {\n      return {\n        caption: name,\n        value: name,\n        meta: meta,\n        score: Number.MAX_VALUE\n      };\n    });\n  }\n\n  findToken(session, row, column, target, value, guard) {\n    var tokens, idx;\n    for (var r = row; r >= 0; r--) {\n      tokens = session.getTokens(r);\n      if (r === row) { // current row\n        var c = 0;\n        for (idx = 0; idx < tokens.length; idx++) {\n          c += tokens[idx].value.length;\n          if (c >= column) {\n            break;\n          }\n        }\n      } else {\n        idx = tokens.length - 1;\n      }\n\n      for (; idx >= 0; idx--) {\n        if (tokens[idx].type === guard) {\n          return null;\n        }\n\n        if (tokens[idx].type === target\n          && (!value || tokens[idx].value === value)) {\n          tokens[idx].row = r;\n          tokens[idx].index = idx;\n          return tokens[idx];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  getFilterKeys(obj, prefix, keys) {\n    _.forOwn(obj, (val, key) => {\n      if (key === 'labels') {\n        key = 'label';\n      }\n      if (_.isObject(val)) {\n        this.getFilterKeys(val, prefix + key + '.', keys);\n      } else if (_.isArray(val)) {\n        // ignore\n      } else if (key === 'points') {\n        // ignore\n      } else {\n        keys.push(prefix + key);\n      }\n    });\n\n    return keys;\n  }\n}\n"]}