{"version":3,"sources":["../src/query_parameter_ctrl.js"],"names":["angular","_","module","directive","templateUrl","controller","restrict","scope","target","datasource","onChange","$scope","templateSrv","uiSegmentSrv","datasourceSrv","timeSrv","$q","init","projectId","mode","filter","aggregation","perSeriesAligner","alignmentPeriod","crossSeriesReducer","groupByFields","alias","perSeriesAlignerSegment","getSegmentForValue","crossSeriesReducerSegment","groupByFieldsSegments","map","field","ensurePlusButton","removeGroupByFieldsSegment","newSegment","fake","value","getPerSeriesAligner","when","v","expandable","getCrossSeriesReducer","alignerChanged","reducerChanged","getAllFieldPaths","timeSeries","paths","walk","obj","path","Object","keys","key","push","getGroupByFieldsSegments","params","defaultProjectId","view","performTimeSeriesQuery","range","timeRange","then","fields","uniq","flatten","response","d","points","f","replace","copy","groupByFieldsSegmentChanged","segment","index","splice","type","reduce","memo","seg","segments","count","length","lastSegment","Math","max","newPlusButton"],"mappings":"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","file":"query_parameter_ctrl.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\n\nangular.module('grafana.directives').directive('googleStackdriverQueryParameter', () => {\n  return {\n    templateUrl: 'public/plugins/mtanda-google-stackdriver-datasource/partials/query.parameter.html',\n    controller: 'GoogleStackdriverQueryParameterCtrl',\n    restrict: 'E',\n    scope: {\n      target: \"=\",\n      datasource: \"=\",\n      onChange: \"&\",\n    }\n  };\n});\n\nangular.module('grafana.controllers').controller('GoogleStackdriverQueryParameterCtrl', ($scope, templateSrv, uiSegmentSrv, datasourceSrv, timeSrv, $q) => {\n  $scope.init = function () {\n    let target = $scope.target;\n    target.projectId = target.projectId || '';\n    target.mode = 'monitoring'; // will support logging\n    target.filter = target.filter || '';\n    target.aggregation = target.aggregation || {\n      perSeriesAligner: 'ALIGN_NONE',\n      alignmentPeriod: '',\n      crossSeriesReducer: 'REDUCE_NONE',\n      groupByFields: []\n    };\n    target.alias = target.alias || '';\n\n    $scope.perSeriesAlignerSegment = uiSegmentSrv.getSegmentForValue($scope.target.aggregation.perSeriesAligner, 'aligner');\n    $scope.crossSeriesReducerSegment = uiSegmentSrv.getSegmentForValue($scope.target.aggregation.crossSeriesReducer, 'reducer');\n    $scope.groupByFieldsSegments = _.map($scope.target.aggregation.groupByFields, (field) => {\n      return uiSegmentSrv.getSegmentForValue(field);\n    });\n    $scope.ensurePlusButton($scope.groupByFieldsSegments);\n    $scope.removeGroupByFieldsSegment = uiSegmentSrv.newSegment({ fake: true, value: '-- remove field --' });\n\n    if (!$scope.onChange) {\n      $scope.onChange = function () { };\n    }\n  };\n\n  $scope.getPerSeriesAligner = function () {\n    return $q.when([\n      'ALIGN_NONE',\n      'ALIGN_DELTA',\n      'ALIGN_RATE',\n      'ALIGN_INTERPOLATE',\n      'ALIGN_NEXT_OLDER',\n      'ALIGN_MIN',\n      'ALIGN_MAX',\n      'ALIGN_MEAN',\n      'ALIGN_COUNT',\n      'ALIGN_SUM',\n      'ALIGN_STDDEV',\n      'ALIGN_COUNT_TRUE',\n      'ALIGN_FRACTION_TRUE',\n      'ALIGN_PERCENTILE_05',\n      'ALIGN_PERCENTILE_50',\n      'ALIGN_PERCENTILE_95',\n      'ALIGN_PERCENTILE_99'\n    ].map(v => {\n      return uiSegmentSrv.newSegment({ value: v, expandable: false });\n    }));\n  };\n\n  $scope.getCrossSeriesReducer = function () {\n    return $q.when([\n      'REDUCE_NONE',\n      'REDUCE_MEAN',\n      'REDUCE_MIN',\n      'REDUCE_MAX',\n      'REDUCE_SUM',\n      'REDUCE_STDDEV',\n      'REDUCE_COUNT',\n      'REDUCE_COUNT_TRUE',\n      'REDUCE_FRACTION_TRUE',\n      'REDUCE_PERCENTILE_05',\n      'REDUCE_PERCENTILE_50',\n      'REDUCE_PERCENTILE_95',\n      'REDUCE_PERCENTILE_99',\n    ].map(v => {\n      return uiSegmentSrv.newSegment({ value: v, expandable: false });\n    }));\n  };\n\n  $scope.alignerChanged = function () {\n    $scope.target.aggregation.perSeriesAligner = $scope.perSeriesAlignerSegment.value;\n    $scope.onChange();\n  };\n\n  $scope.reducerChanged = function () {\n    $scope.target.aggregation.crossSeriesReducer = $scope.crossSeriesReducerSegment.value;\n    $scope.onChange();\n  };\n\n  function getAllFieldPaths(timeSeries) {\n    let paths = [];\n    let walk = function (obj, path) {\n      path = path || '';\n      for (let key of Object.keys(obj)) {\n        if (obj[key] instanceof Object) {\n          walk(obj[key], path + key + '.');\n        } else {\n          paths.push(path + key);\n        }\n      }\n    }\n    walk(timeSeries, '');\n    return paths;\n  }\n\n  $scope.getGroupByFieldsSegments = function () {\n    let params = {\n      projectId: $scope.target.projectId || $scope.datasource.defaultProjectId,\n      filter: $scope.target.filter,\n      view: 'HEADERS'\n    };\n    return $scope.datasource.performTimeSeriesQuery(params, { range: timeSrv.timeRange() }).then(response => {\n      let fields = _.uniq(_.flatten(response.timeSeries.map(d => {\n        delete(d.points);\n        return getAllFieldPaths(d);\n      }))).map(f => {\n        f = f.replace(/\\.labels\\./, '.label.');\n        return uiSegmentSrv.newSegment({ value: f, expandable: false });\n      });\n      fields.push(angular.copy($scope.removeGroupByFieldsSegment));\n      return fields;\n    });\n  };\n\n  $scope.groupByFieldsSegmentChanged = function (segment, index) {\n    if (segment.value === $scope.removeGroupByFieldsSegment.value) {\n      $scope.groupByFieldsSegments.splice(index, 1);\n    } else {\n      segment.type = 'value';\n    }\n\n    $scope.target.aggregation.groupByFields = _.reduce($scope.groupByFieldsSegments, function (memo, seg) {\n      if (!seg.fake) { memo.push(seg.value); } return memo;\n    }, []);\n\n    $scope.ensurePlusButton($scope.groupByFieldsSegments);\n    $scope.onChange();\n  };\n\n  $scope.ensurePlusButton = function (segments) {\n    let count = segments.length;\n    let lastSegment = segments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      segments.push(uiSegmentSrv.newPlusButton());\n    }\n  };\n\n  $scope.init();\n});\n"]}