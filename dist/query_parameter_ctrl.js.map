{"version":3,"sources":["../src/query_parameter_ctrl.js"],"names":["angular","_","StackdriverCompleter","module","directive","templateUrl","controller","restrict","scope","target","datasource","isLastQuery","onChange","$scope","templateSrv","uiSegmentSrv","datasourceSrv","timeSrv","$q","init","projectId","mode","metricType","filter","aggregation","perSeriesAligner","alignmentPeriod","crossSeriesReducer","groupByFields","alias","perSeriesAlignerSegment","getSegmentForValue","crossSeriesReducerSegment","groupByFieldsSegments","map","field","ensurePlusButton","removeGroupByFieldsSegment","newSegment","fake","value","getCompleter","query","$on","$apply","suggestMetricType","callback","params","performMetricDescriptorsQuery","then","metricTypes","response","metricDescriptors","d","type","getPerSeriesAligner","when","v","expandable","getCrossSeriesReducer","alignerChanged","reducerChanged","getAllFieldPaths","timeSeries","paths","walk","obj","path","Object","keys","key","push","getGroupByFieldsSegments","defaultProjectId","view","performTimeSeriesQuery","range","timeRange","fields","uniq","flatten","points","f","replace","copy","groupByFieldsSegmentChanged","segment","index","splice","reduce","memo","seg","segments","count","length","lastSegment","Math","max","newPlusButton"],"mappings":"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","file":"query_parameter_ctrl.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport {StackdriverCompleter} from './completer';\n\nangular.module('grafana.directives').directive('googleStackdriverQueryParameter', () => {\n  return {\n    templateUrl: 'public/plugins/mtanda-google-stackdriver-datasource/partials/query.parameter.html',\n    controller: 'GoogleStackdriverQueryParameterCtrl',\n    restrict: 'E',\n    scope: {\n      target: \"=\",\n      datasource: \"=\",\n      isLastQuery: \"=\",\n      onChange: \"&\",\n    }\n  };\n});\n\nangular.module('grafana.controllers').controller('GoogleStackdriverQueryParameterCtrl', ($scope, templateSrv, uiSegmentSrv, datasourceSrv, timeSrv, $q) => {\n  $scope.init = function () {\n    let target = $scope.target;\n    target.projectId = target.projectId || '';\n    target.mode = 'monitoring'; // will support logging\n    target.metricType = target.metricType || '';\n    target.filter = target.filter || '';\n    target.aggregation = target.aggregation || {\n      perSeriesAligner: 'ALIGN_NONE',\n      alignmentPeriod: '',\n      crossSeriesReducer: 'REDUCE_NONE',\n      groupByFields: []\n    };\n    target.alias = target.alias || '';\n\n    $scope.perSeriesAlignerSegment = uiSegmentSrv.getSegmentForValue($scope.target.aggregation.perSeriesAligner, 'aligner');\n    $scope.crossSeriesReducerSegment = uiSegmentSrv.getSegmentForValue($scope.target.aggregation.crossSeriesReducer, 'reducer');\n    $scope.groupByFieldsSegments = _.map($scope.target.aggregation.groupByFields, (field) => {\n      return uiSegmentSrv.getSegmentForValue(field);\n    });\n    $scope.ensurePlusButton($scope.groupByFieldsSegments);\n    $scope.removeGroupByFieldsSegment = uiSegmentSrv.newSegment({ fake: true, value: '-- remove field --' });\n\n    if (!$scope.onChange) {\n      $scope.onChange = function () { };\n    }\n  };\n\n  $scope.getCompleter = function (query) {\n    return new StackdriverCompleter(this.datasource, timeSrv, $scope.target);\n  };\n\n  $scope.$on('typeahead-updated', () => {\n    $scope.$apply(() => {\n      $scope.onChange();\n    });\n  });\n\n  $scope.suggestMetricType = function (query, callback) {\n    if (query === '') {\n      return callback([]);\n    }\n    let params = {\n      filter: 'metric.type = starts_with(\"' + query + '\")'\n    };\n    return $scope.datasource.performMetricDescriptorsQuery(params, {}).then(response => {\n      let metricTypes = response.metricDescriptors.map(d => {\n        return d.type;\n      });\n      return callback(metricTypes);\n    });\n  };\n\n  $scope.getPerSeriesAligner = function () {\n    return $q.when([\n      'ALIGN_NONE',\n      'ALIGN_DELTA',\n      'ALIGN_RATE',\n      'ALIGN_INTERPOLATE',\n      'ALIGN_NEXT_OLDER',\n      'ALIGN_MIN',\n      'ALIGN_MAX',\n      'ALIGN_MEAN',\n      'ALIGN_COUNT',\n      'ALIGN_SUM',\n      'ALIGN_STDDEV',\n      'ALIGN_COUNT_TRUE',\n      'ALIGN_FRACTION_TRUE',\n      'ALIGN_PERCENTILE_05',\n      'ALIGN_PERCENTILE_50',\n      'ALIGN_PERCENTILE_95',\n      'ALIGN_PERCENTILE_99'\n    ].map(v => {\n      return uiSegmentSrv.newSegment({ value: v, expandable: false });\n    }));\n  };\n\n  $scope.getCrossSeriesReducer = function () {\n    return $q.when([\n      'REDUCE_NONE',\n      'REDUCE_MEAN',\n      'REDUCE_MIN',\n      'REDUCE_MAX',\n      'REDUCE_SUM',\n      'REDUCE_STDDEV',\n      'REDUCE_COUNT',\n      'REDUCE_COUNT_TRUE',\n      'REDUCE_FRACTION_TRUE',\n      'REDUCE_PERCENTILE_05',\n      'REDUCE_PERCENTILE_50',\n      'REDUCE_PERCENTILE_95',\n      'REDUCE_PERCENTILE_99',\n    ].map(v => {\n      return uiSegmentSrv.newSegment({ value: v, expandable: false });\n    }));\n  };\n\n  $scope.alignerChanged = function () {\n    $scope.target.aggregation.perSeriesAligner = $scope.perSeriesAlignerSegment.value;\n    $scope.onChange();\n  };\n\n  $scope.reducerChanged = function () {\n    $scope.target.aggregation.crossSeriesReducer = $scope.crossSeriesReducerSegment.value;\n    $scope.onChange();\n  };\n\n  function getAllFieldPaths(timeSeries) {\n    let paths = [];\n    let walk = function (obj, path) {\n      path = path || '';\n      for (let key of Object.keys(obj)) {\n        if (obj[key] instanceof Object) {\n          walk(obj[key], path + key + '.');\n        } else {\n          paths.push(path + key);\n        }\n      }\n    }\n    walk(timeSeries, '');\n    return paths;\n  }\n\n  $scope.getGroupByFieldsSegments = function () {\n    let params = {\n      projectId: $scope.target.projectId || $scope.datasource.defaultProjectId,\n      filter: $scope.target.filter,\n      view: 'HEADERS'\n    };\n    return $scope.datasource.performTimeSeriesQuery(params, { range: timeSrv.timeRange() }).then(response => {\n      let fields = _.uniq(_.flatten(response.timeSeries.map(d => {\n        delete(d.points);\n        return getAllFieldPaths(d);\n      }))).map(f => {\n        f = f.replace(/\\.labels\\./, '.label.');\n        return uiSegmentSrv.newSegment({ value: f, expandable: false });\n      });\n      fields.push(angular.copy($scope.removeGroupByFieldsSegment));\n      return fields;\n    });\n  };\n\n  $scope.groupByFieldsSegmentChanged = function (segment, index) {\n    if (segment.value === $scope.removeGroupByFieldsSegment.value) {\n      $scope.groupByFieldsSegments.splice(index, 1);\n    } else {\n      segment.type = 'value';\n    }\n\n    $scope.target.aggregation.groupByFields = _.reduce($scope.groupByFieldsSegments, function (memo, seg) {\n      if (!seg.fake) { memo.push(seg.value); } return memo;\n    }, []);\n\n    $scope.ensurePlusButton($scope.groupByFieldsSegments);\n    $scope.onChange();\n  };\n\n  $scope.ensurePlusButton = function (segments) {\n    let count = segments.length;\n    let lastSegment = segments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      segments.push(uiSegmentSrv.newPlusButton());\n    }\n  };\n\n  $scope.init();\n});\n"]}