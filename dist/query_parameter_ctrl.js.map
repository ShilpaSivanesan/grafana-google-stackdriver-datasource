{"version":3,"sources":["../src/query_parameter_ctrl.js"],"names":["angular","_","module","directive","templateUrl","controller","restrict","scope","target","datasource","onChange","$scope","templateSrv","uiSegmentSrv","datasourceSrv","$q","init","projectId","mode","filter","aggregation","perSeriesAligner","alignmentPeriod","crossSeriesReducer","groupByFields","alias","perSeriesAlignerSegment","newSegment","value","crossSeriesReducerSegment","groupByFieldsSegments","map","field","getSegmentForValue","ensurePlusButton","removeGroupByFieldsSegment","fake","getPerSeriesAligner","when","v","expandable","getCrossSeriesReducer","alignerChanged","reducerChanged","getGroupByFieldsSegments","flatten","copy","groupByFieldsSegmentChanged","segment","index","splice","type","reduce","memo","seg","push","segments","count","length","lastSegment","Math","max","newPlusButton"],"mappings":"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","file":"query_parameter_ctrl.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\n\nangular.module('grafana.directives').directive('googleStackdriverQueryParameter', () => {\n  return {\n    templateUrl: 'public/plugins/mtanda-google-stackdriver-datasource/partials/query.parameter.html',\n    controller: 'GoogleStackdriverQueryParameterCtrl',\n    restrict: 'E',\n    scope: {\n      target: \"=\",\n      datasource: \"=\",\n      onChange: \"&\",\n    }\n  };\n});\n\nangular.module('grafana.controllers').controller('GoogleStackdriverQueryParameterCtrl', ($scope, templateSrv, uiSegmentSrv, datasourceSrv, $q) => {\n  $scope.init = function () {\n    let target = $scope.target;\n    target.projectId = target.projectId || '';\n    target.mode = 'monitoring'; // will support logging\n    target.filter = target.filter || '';\n    target.aggregation = target.aggregation || {\n      perSeriesAligner: 'ALIGN_NONE',\n      alignmentPeriod: '',\n      crossSeriesReducer: 'REDUCE_NONE',\n      groupByFields: []\n    };\n    target.alias = target.alias || '';\n\n    $scope.perSeriesAlignerSegment = uiSegmentSrv.newSegment({value: 'aligner'});\n    $scope.crossSeriesReducerSegment = uiSegmentSrv.newSegment({value: 'reducer'});\n    $scope.groupByFieldsSegments = _.map($scope.target.aggregation.groupByFields, (field) => {\n      return uiSegmentSrv.getSegmentForValue(field);\n    });\n    $scope.ensurePlusButton($scope.groupByFieldsSegments);\n    $scope.removeGroupByFieldsSegment = uiSegmentSrv.newSegment({ fake: true, value: '-- remove field --' });\n\n    if (!$scope.onChange) {\n      $scope.onChange = function () { };\n    }\n  };\n\n  $scope.getPerSeriesAligner = function () {\n    return $q.when([\n      'ALIGN_NONE',\n      'ALIGN_DELTA',\n      'ALIGN_RATE',\n      'ALIGN_INTERPOLATE',\n      'ALIGN_NEXT_OLDER',\n      'ALIGN_MIN',\n      'ALIGN_MAX',\n      'ALIGN_MEAN',\n      'ALIGN_COUNT',\n      'ALIGN_SUM',\n      'ALIGN_STDDEV',\n      'ALIGN_COUNT_TRUE',\n      'ALIGN_FRACTION_TRUE',\n      'ALIGN_PERCENTILE_05',\n      'ALIGN_PERCENTILE_50',\n      'ALIGN_PERCENTILE_95',\n      'ALIGN_PERCENTILE_99'\n    ].map(v => {\n      return uiSegmentSrv.newSegment({ value: v, expandable: false });\n    }));\n  };\n\n  $scope.getCrossSeriesReducer = function () {\n    return $q.when([\n      'REDUCE_NONE',\n      'REDUCE_MEAN',\n      'REDUCE_MIN',\n      'REDUCE_MAX',\n      'REDUCE_SUM',\n      'REDUCE_STDDEV',\n      'REDUCE_COUNT',\n      'REDUCE_COUNT_TRUE',\n      'REDUCE_FRACTION_TRUE',\n      'REDUCE_PERCENTILE_05',\n      'REDUCE_PERCENTILE_50',\n      'REDUCE_PERCENTILE_95',\n      'REDUCE_PERCENTILE_99',\n    ].map(v => {\n      return uiSegmentSrv.newSegment({ value: v, expandable: false });\n    }));\n  };\n\n  $scope.alignerChanged = function () {\n    $scope.target.aggregation.perSeriesAligner = $scope.perSeriesAlignerSegment.value;\n    $scope.onChange();\n  };\n\n  $scope.reducerChanged = function () {\n    $scope.target.aggregation.crossSeriesReducer = $scope.crossSeriesReducerSegment.value;\n    $scope.onChange();\n  };\n\n  $scope.getGroupByFieldsSegments = function () {\n    return $q.when(_.flatten([\n      angular.copy($scope.removeGroupByFieldsSegment),\n      uiSegmentSrv.getSegmentForValue('resource.type'),\n    ]));\n  };\n\n  $scope.groupByFieldsSegmentChanged = function (segment, index) {\n    if (segment.value === $scope.removeGroupByFieldsSegment.value) {\n      $scope.groupByFieldsSegments.splice(index, 1);\n    } else {\n      segment.type = 'value';\n    }\n\n    $scope.target.aggregation.groupByFields = _.reduce($scope.groupByFieldsSegments, function (memo, seg) {\n      if (!seg.fake) { memo.push(seg.value); } return memo;\n    }, []);\n\n    $scope.ensurePlusButton($scope.groupByFieldsSegments);\n    $scope.onChange();\n  };\n\n  $scope.ensurePlusButton = function (segments) {\n    var count = segments.length;\n    var lastSegment = segments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      segments.push(uiSegmentSrv.newPlusButton());\n    }\n  };\n\n  $scope.init();\n});\n"]}